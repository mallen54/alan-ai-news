/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Here is the script that was used to program Alan AI to work on this application. This was coded in their Alan Ai Studio, but I have added the code here for viewing.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


intent('What does this app do?', 'What can I do?', 'What do you do?', reply('This is a news project. '));

const API_KEY = '3d3adb4ae9664a219c614ecc7f357327';
let savedArticles = [];

//News Source
intent('Give me the news from $(source* (.*))', (p) => {
    let NEWS_API_URL = `https://newsapi.org/v2/top-headlines?apiKey=${API_KEY}`;
    if(p.source.value){
        NEWS_API_URL = `${NEWS_API_URL}&sources=${p.source.value.toLowerCase().split(" ").join('-')}`;
    }
  
    api.axios.get(NEWS_API_URL)
        .then((response) =>{
            
            const articles = response.data.articles;
            
            if(!articles.length){
               p.play('Sorry, please try searching for news from a different source.');
               return;
            }
            
            savedArticles = articles;
        
            p.play({command: 'newHeadlines', articles});
            p.play(`Here are the (latest | most recent) ${p.source.value} news.`);
        
            p.play('Would you like me to read the headlines for you?');
            p.then(confirmation);
        
        })
        .catch((error) =>{
            console.log(error);
        });

})

//News by Term
intent('What\'s up with $(term* (.*))', (p) => {
    let NEWS_API_URL = `https://newsapi.org/v2/everything?apiKey=${API_KEY}`;
    if(p.term.value){
        NEWS_API_URL = `${NEWS_API_URL}&q=${p.term.value}`;
    }
  
    api.axios.get(NEWS_API_URL)
        .then((response) =>{
            
            const articles = response.data.articles;
            
            if(!articles.length){
               p.play('Sorry, please try searching for something else');
               return;
            }
            
            savedArticles = articles;
        
            p.play({command: 'newHeadlines', articles});
            p.play(`Here are the (latest | most recent) articles on ${p.term.value}.`);
        
            p.play('Would you like me to read the headlines for you?');
            p.then(confirmation);
        })
        .catch((error) =>{
            console.log(error);
        });

})


//News by Categories
const CATEGORIES = ['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology'];
const CATEGORIES_INTENT = `${CATEGORIES.map((category) => `${category}~${category}`).join('|')}`;

intent(`(show|what is|tell me|what's|what are|what're|read) (the|) (recent|latest|) $(N news|headlines) (in|about|on|) $(C~ ${CATEGORIES_INTENT})`,
  `(read|show|get|bring me|give me) (the|) (recent|latest) $(C~ ${CATEGORIES_INTENT}|) $(N news|headlines)`, (p) => {
    
    let NEWS_API_URL = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${API_KEY}`;
    if(p.C.value){
        NEWS_API_URL = `${NEWS_API_URL}&category=${p.C.value}`;
    }
  
    api.axios.get(NEWS_API_URL)
        .then((response) =>{
            
            const articles = response.data.articles;
            
            if(!articles.length){
               p.play('Sorry, please try searching for a different category');
               return;
            }
            
            savedArticles = articles;
        
            p.play({command: 'newHeadlines', articles});
            if(p.C.value){
                p.play(`Here are the (latest | most recent) articles on ${p.C.value}.`);
            }else{
                p.play(`Here are the (latest | most recent) news`);
            }
            
        
            p.play('Would you like me to read the headlines for you?');
            p.then(confirmation);
        })
        .catch((error) =>{
            console.log(error);
        });

})


const confirmation = context(() => {
    intent('(Yes|Sure)', async (p) =>{
        for(let i = 0; i < savedArticles.length; i++){
            p.play({command: 'highlight', article: savedArticles[i]});
            p.play(`${savedArticles[i].title}`);
        }
    })
    
    intent('No', (p) =>{
        p.play('Ok then.');
    })
})


intent('Open (the|) (article|) (number|) $(number* (.*))', (p) => {
    if(p.number.value){
       // p.play('Opening...');
        p.play({command: 'open', number:p.number.value, articles: savedArticles});
    }
})


intent('(Go|) back', (p) => {
    p.play('Sure. Going back');
    p.play({command: 'newHeadlines', articles: []});
})